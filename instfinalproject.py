# -*- coding: utf-8 -*-
"""instfinalproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dKskOJWo9f7SI2FplGzg2t3Il0ka6n9D

INST Final Project

```
# This is formatted as code
```

NBA Basketball Data 2014-2015
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np from datascience import *
import seaborn as sns
import plotly.express as px

import matplotlib
# %matplotlib inline
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

from google.colab import drive
drive.mount('/content/drive')

df = (pd.read_csv('/content/sample_data/player_data.csv'))
df.head()

salary_data = pd.read_csv('/content/sample_data/salary_data.csv')
salary_data

player_data = pd.read_csv('/content/sample_data/player_data.csv')
player_data

full_data = salary_data.merge(player_data, left_on="PlayerName", right_on="Name")
full_data

full_data_with_value = full_data.copy() # make a copy of the full_data table
full_data_with_value["Value"] = full_data.apply(lambda row: row["Points"] / (row["Salary"]/1000), axis=1) 
#Divided salary by 1000, and that by points to see each individual players value based on salary and points.

full_data_with_value

full_data_with_value.hist('Value', bins = 10, range = make_array(0,0.0015))

# Create a scatter plot to visualize the relationship between age and points scored
fig = px.scatter(df, x='Age', y='Points', color='Team', hover_data=['Name'])
fig.update_layout(title='Points Scored by Age and Team', xaxis_title='Age', yaxis_title='Points')
fig.show()

df_grouped.plot(kind='bar', stacked=True)
plt.title('Team Statistics')
plt.xlabel('Team')
plt.ylabel('Average')
plt.show()

df_grouped = df.groupby('Team').mean().reset_index()

# Pivot the data to create a matrix of mean values for each team and each statistic
df_pivoted = df_grouped.pivot_table(index='Team', values=['Points', 'Assists', 'Rebounds'])

sns.heatmap(df_pivoted, cmap='Reds', annot=True, fmt='.1f', linewidths=.5)

# Set the title and axis labels
plt.title('Average NBA Statistics by Team')
plt.xlabel('Statistic')
plt.ylabel('Team')

# Display the heatmap
plt.show()

df = pd.read_csv('/content/sample_data/player_data.csv')
cols = ['Team', 'Points', 'Rebounds', 'Assists']

# Group the data by team and calculate the total points, rebounds, and assists for each team
grouped_df = df[cols].groupby(['Team']).sum()

# Create a stacked bar chart of the total points, rebounds, and assists for each team
grouped_df.plot(kind='bar', stacked=True)
plt.title('Total Points, Rebounds, and Assists by Team')
plt.xlabel('Team')
plt.ylabel('Total')
plt.show()

#This visualization can help us compare the offensive and defensive performance of different teams in the league, and identify which teams have the strongest overall performance. We can also see how the points, rebounds, and assists are distributed among the different teams, and if there are any teams that excel in one category over the others.

cols = ['Name', 'Points', 'Assists']
df = df[cols].sort_values(by=['Points', 'Assists'], ascending=False)

# Select the top 10 players based on points and assists
top_players = df.head(10)

# Create a horizontal bar chart to visualize the top players based on points and assists
fig, ax = plt.subplots()
ax.barh(top_players['Name'], top_players['Points'], label='Points')
ax.barh(top_players['Name'], top_players['Assists'], label='Assists')
ax.set_xlabel('Points and Assists')
ax.set_title('Top NBA Players Based on Points and Assists')
ax.legend()
plt.show()

df = pd.read_csv('/content/sample_data/player_data.csv')

# Group the data by team and sum the points and assists for each team
team_data = df.groupby('Team').sum()[['Points', 'Assists']]

# Sort the teams by points and assists
team_data = team_data.sort_values(by=['Points', 'Assists'], ascending=False)

# Select the top 10 teams based on points and assists
top_teams = team_data.head(10)

# Create a horizontal bar chart to visualize the top teams based on points and assists
fig, ax = plt.subplots()
ax.barh(top_teams.index, top_teams['Points'], label='Points')
ax.barh(top_teams.index, top_teams['Assists'], label='Assists')
ax.set_xlabel('Points and Assists')
ax.set_title('Top NBA Teams Based on Points and Assists')
ax.legend()
plt.show()

sns.pairplot(df, kind='scatter')